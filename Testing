import torch
from torch import nn
from torchvision import models, transforms
from torchvision.models import ResNet18_Weights
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import os

# Print current working directory
print("Current working directory:", os.getcwd())

# Ensure the correct path to the model file
model_path = 'C:\\Users\\sathw\\Downloads\\models\\brain_classification_model.pth'  # Update this to the correct path if necessary

# Check if the file exists
if not os.path.isfile(model_path):
    raise FileNotFoundError(f"No such file: '{model_path}'")

# Load the saved model with 4 output units
model = models.resnet18(weights=ResNet18_Weights.IMAGENET1K_V1)
model.fc = nn.Linear(model.fc.in_features, 4)  # Adjust to match the saved model's output units
model.load_state_dict(torch.load(model_path))
model.eval()

# Prepare your new image for classification
image_path =  "C:\\Users\\sathw\\Downloads\\W1.jpg" # Replace with the path to your image
image = Image.open(image_path)
preprocess = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])
input_tensor = preprocess(image)
input_batch = input_tensor.unsqueeze(0)  # Add a batch dimension

# Perform inference with the model
with torch.no_grad():
    output = model(input_batch)

# Get the predicted class
_, predicted_class = output.max(1)

# Map the predicted class to the class name
class_names = ['glioma', 'meningioma', 'notumor', 'pituitary']  # Make sure these class names match your training data
predicted_class_name = class_names[predicted_class.item()]

# Display the image with the predicted class name
image = np.array(image)
plt.imshow(image)
plt.axis('off')
plt.text(10, 10, f'Predicted: {predicted_class_name}', fontsize=12, color='white', backgroundcolor='red')
plt.show()
